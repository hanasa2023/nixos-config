local M = {}

function M:peek(job)
	local child
<<<<<<< HEAD
||||||| f845ea5
	local l = self.file.cha.length
=======
	local l = self.file.cha.len
>>>>>>> ccc0a4a959bea14dbe8f2b243793aacd697e34e2
	if l == 0 then
		child = Command("hexyl")
				:args({
					tostring(job.file.url),
				})
				:stdout(Command.PIPED)
				:stderr(Command.PIPED)
				:spawn()
	else
		child = Command("hexyl")
				:args({
					"--border",
					"none",
					"--terminal-width",
					tostring(job.area.w),
					tostring(job.file.url),
				})
				:stdout(Command.PIPED)
				:stderr(Command.PIPED)
				:spawn()
	end

	local limit = job.area.h
	local i, lines = 0, ""
	repeat
		local next, event = child:read_line()
		if event == 1 then
			ya.err(tostring(event))
		elseif event ~= 0 then
			break
		end

		i = i + 1
		if i > job.skip then
			lines = lines .. next
		end
	until i >= job.skip + limit

	child:start_kill()
<<<<<<< HEAD
	if job.skip > 0 and i < job.skip + limit then
		ya.manager_emit("peek", { math.max(0, i - limit), only_if = job.file.url, upper_bound = true })
||||||| f845ea5
	if self.skip > 0 and i < self.skip + limit then
		ya.manager_emit(
			"peek",
			{ tostring(math.max(0, i - limit)), only_if = tostring(self.file.url), upper_bound = "" }
		)
=======
	if self.skip > 0 and i < self.skip + limit then
		ya.manager_emit("peek", { math.max(0, i - limit), only_if = self.file.url, upper_bound = true })
>>>>>>> ccc0a4a959bea14dbe8f2b243793aacd697e34e2
	else
		lines = lines:gsub("\t", string.rep(" ", PREVIEW.tab_size))
<<<<<<< HEAD
		ya.preview_widgets(job, { ui.Text.parse(lines):area(job.area) })
		ya.err(lines)
||||||| f845ea5
		ya.preview_widgets(self, { ui.Paragraph.parse(self.area, lines) })
=======
		ya.preview_widgets(self, { ui.Text.parse(lines):area(self.area) })
>>>>>>> ccc0a4a959bea14dbe8f2b243793aacd697e34e2
	end
end

function M:seek(units)
	require("code").seek(job, units)
end

return M
